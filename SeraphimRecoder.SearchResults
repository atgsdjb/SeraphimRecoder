---- moov Matches (87 in 10 files) ----
3gp.cpp (jni\mp4v2):52
		MP4Atom* iodsAtom = m_pRootAtom->FindAtom("moov.iods");
		if (iodsAtom) {
			MP4Atom* moovAtom = m_pRootAtom->FindAtom("moov");
			ASSERT(moovAtom);

Atom_root.cpp (jni\mp4v2):27
	ExpectChildAtom("moov", Required, OnlyOne);
	ExpectChildAtom("ftyp", Optional, OnlyOne);
	ExpectChildAtom("mdat", Optional, Many);
Atom_root.cpp (jni\mp4v2):65
	WriteAtomType("moov", OnlyOne);
	WriteAtomType("udta", Many);

Atom_root.cpp (jni\mp4v2):76
	// find moov atom
	u_int32_t size = m_pChildAtoms.Size();
	MP4Atom* pMoovAtom = NULL;
Atom_root.cpp (jni\mp4v2):82
		if (!strcmp("moov", m_pChildAtoms[i]->GetType())) {
			pMoovAtom = m_pChildAtoms[i];
			break;
Atom_root.cpp (jni\mp4v2):89
	// rewrite moov so that updated chunkOffsets are written to disk
	m_pFile->SetPosition(pMoovAtom->GetStart());
	u_int64_t oldSize = pMoovAtom->GetSize();
Atom_standard.cpp (jni\mp4v2):235
  } else if (ATOMID(type) == ATOMID("moov")) {
    ExpectChildAtom("mvhd", Required, OnlyOne);
    ExpectChildAtom("iods", Optional, OnlyOne);
Isma.cpp (jni\mp4v2):104
	if (m_pRootAtom->FindAtom("moov.iods") == NULL) {
	  AddChildAtom("moov", "iods");
	}
	AddODTrack();
Isma.cpp (jni\mp4v2):230
	MP4Atom* pIodsAtom = FindAtom("moov.iods");
	ASSERT(pIodsAtom);
	MP4DescriptorProperty* pSrcIod = 
Mp4.cpp (jni\mp4v2):82
		// LATER useExtensibleFormat, moov first, then mvex's
		pFile->Create(fileName, flags, add_ftyp, add_iods,
			      majorBrand, minorVersion, 
Mp4.cpp (jni\mp4v2):102
		// LATER useExtensibleFormat, moov first, then mvex's
		pFile->Modify(fileName);
		return (MP4FileHandle)pFile;
Mp4atom.cpp (jni\mp4v2):467
//moov.track[index].tkhd.width
bool MP4Atom::FindProperty(const char *name, 
	MP4Property** ppProperty, u_int32_t* pIndex)
Mp4atom.cpp (jni\mp4v2):489
//moov.track[index].tkhd.width
bool MP4Atom::IsMe(const char* name)
{
Mp4atom.cpp (jni\mp4v2):513
	// get the index if we have one, e.g. moov.trak[2].mdia...
	MP4NameFirstIndex(name, &atomIndex);

Mp4file.cpp (jni\mp4v2):134
	// create mdat, and insert it after ftyp, and before moov
	InsertChildAtom(m_pRootAtom, "mdat", 
			add_ftyp != 0 ? 1 : 0);
Mp4file.cpp (jni\mp4v2):141
	  AddChildAtom("moov", "iods");
	}
}
Mp4file.cpp (jni\mp4v2):183
	// find the moov atom
	MP4Atom* pMoovAtom = m_pRootAtom->FindAtom("moov");
	u_int32_t numAtoms;

Mp4file.cpp (jni\mp4v2):189
		pMoovAtom = AddChildAtom(m_pRootAtom, "moov");
	} else {
		numAtoms = m_pRootAtom->GetNumberOfChildAtoms();
Mp4file.cpp (jni\mp4v2):208
			if (strcmp(type, "moov")) {
				if (pLastAtom == NULL) {
					pLastAtom = pAtom;
Mp4file.cpp (jni\mp4v2):216
			// now at moov atom

			// multiple moov atoms?!?
			if (pAtom != pMoovAtom) {
				throw new MP4Error(
					"Badly formed mp4 file, multiple moov atoms", 
					"MP4Modify");
			}
Mp4file.cpp (jni\mp4v2):226
				// position to start of moov atom,
				// effectively truncating file 
				// prior to adding new mdat
Mp4file.cpp (jni\mp4v2):231
			} else { // last atom isn't moov
				// need to place a free atom 
				MP4Atom* pFreeAtom = MP4Atom::CreateAtom("free");
Mp4file.cpp (jni\mp4v2):235
				// in existing position of the moov atom
				m_pRootAtom->InsertChildAtom(pFreeAtom, i);
				m_pRootAtom->DeleteChildAtom(pMoovAtom);
Mp4file.cpp (jni\mp4v2):254
	CacheProperties();	// of moov atom

	numAtoms = m_pRootAtom->GetNumberOfChildAtoms();
Mp4file.cpp (jni\mp4v2):258
	// insert another mdat prior to moov atom (the last atom)
	MP4Atom* pMdatAtom = InsertChildAtom(m_pRootAtom, "mdat", numAtoms - 1);

Mp4file.cpp (jni\mp4v2):274
	CacheProperties();	// of moov atom

	// now switch over to writing the new file
Mp4file.cpp (jni\mp4v2):295
	SetIntegerProperty("moov.mvhd.modificationTime", 
		MP4GetAbsTimestamp());

Mp4file.cpp (jni\mp4v2):517
		snprintf(trackName, sizeof(trackName), "moov.trak[%u]", trackIndex);

		// find next trak atom
Mp4file.cpp (jni\mp4v2):577
	FindIntegerProperty("moov.mvhd.modificationTime", 
		(MP4Property**)&m_pModificationProperty);

	FindIntegerProperty("moov.mvhd.timeScale", 
		(MP4Property**)&m_pTimeScaleProperty);

	FindIntegerProperty("moov.mvhd.duration", 
		(MP4Property**)&m_pDurationProperty);
}
Mp4file.cpp (jni\mp4v2):641
		SetIntegerProperty("moov.mvhd.modificationTime", 
			MP4GetAbsTimestamp());

Mp4file.cpp (jni\mp4v2):791
//moov.track[index].tkhd.width
bool MP4File::FindProperty(const char* name, 
	MP4Property** ppProperty, u_int32_t* pIndex)
Mp4file.cpp (jni\mp4v2):842
////moov.track[index].tkhd.width
void MP4File::FindFloatProperty(const char* name, 
	MP4Property** ppProperty, u_int32_t* pIndex)
Mp4file.cpp (jni\mp4v2):873
	//moov.track[index].tkhd.width

	FindFloatProperty(name, &pProperty, &index);
Mp4file.cpp (jni\mp4v2):957
	MP4Atom* pTrakAtom = AddChildAtom("moov", "trak");

	// allocate a new track id
Mp4file.cpp (jni\mp4v2):1018
	m_pRootAtom->FindProperty("moov.iods.esIds", 
		(MP4Property**)&pDescriptorProperty);
	ASSERT(pDescriptorProperty);
Mp4file.cpp (jni\mp4v2):1037
	m_pRootAtom->FindProperty("moov.iods.esIds",
		(MP4Property**)&pDescriptorProperty);

Mp4file.cpp (jni\mp4v2):1993
	MP4Atom* pMoovAtom = FindAtom("moov");
	ASSERT(pMoovAtom);

Mp4file.cpp (jni\mp4v2):2045
		GetIntegerProperty("moov.mvhd.nextTrackId");

	if (trackId <= 0xFFFF) {
Mp4file.cpp (jni\mp4v2):2056
			SetIntegerProperty("moov.mvhd.nextTrackId", trackId + 1);
			return trackId;
		}
Mp4file.cpp (jni\mp4v2):2231
			"moov.trak[%u]", trakIndex);
	} else {
		snprintf(m_trakName, sizeof(m_trakName), 
			"moov.trak[%u].%s", trakIndex, name);
	}
	return m_trakName;
Mp4file.cpp (jni\mp4v2):2317
	return GetIntegerProperty("moov.iods.ODProfileLevelId");
}

Mp4file.cpp (jni\mp4v2):2322
	SetIntegerProperty("moov.iods.ODProfileLevelId", value);
}
 
Mp4file.cpp (jni\mp4v2):2327
	return GetIntegerProperty("moov.iods.sceneProfileLevelId");
}

Mp4file.cpp (jni\mp4v2):2332
	SetIntegerProperty("moov.iods.sceneProfileLevelId", value);
}
 
Mp4file.cpp (jni\mp4v2):2337
	return GetIntegerProperty("moov.iods.visualProfileLevelId");
}

Mp4file.cpp (jni\mp4v2):2342
	SetIntegerProperty("moov.iods.visualProfileLevelId", value);
}
 
Mp4file.cpp (jni\mp4v2):2347
	return GetIntegerProperty("moov.iods.audioProfileLevelId");
}

Mp4file.cpp (jni\mp4v2):2352
	SetIntegerProperty("moov.iods.audioProfileLevelId", value);
}
 
Mp4file.cpp (jni\mp4v2):2357
	return GetIntegerProperty("moov.iods.graphicsProfileLevelId");
}

Mp4file.cpp (jni\mp4v2):2362
	SetIntegerProperty("moov.iods.graphicsProfileLevelId", value);
}
 
Mp4file.cpp (jni\mp4v2):2367
	return GetStringProperty("moov.udta.hnti.rtp .sdpText");
}

Mp4file.cpp (jni\mp4v2):2372
	AddDescendantAtoms("moov", "udta.hnti.rtp ");

	SetStringProperty("moov.udta.hnti.rtp .sdpText", sdpString);
}

Mp4meta.cpp (jni\mp4v2):65
    sprintf(s, "moov.udta.meta.ilst.*[%u].data.metadata", index);
    GetBytesProperty(s, ppValue, pValueSize);

    sprintf(s, "moov.udta.meta.ilst.*[%u]", index);
    MP4Atom* pParent = m_pRootAtom->FindAtom(s);
    *ppName = pParent->GetType();
Mp4meta.cpp (jni\mp4v2):79
        sprintf(s, "moov.udta.meta.ilst.*[%u].name.metadata", index);
        GetBytesProperty(s, &pV, &VSize);

Mp4meta.cpp (jni\mp4v2):98
    sprintf(s, "moov.udta.meta.ilst.%s.data", name);
    AddDescendantAtoms("moov", t);
    MP4Atom *pMetaAtom = m_pRootAtom->FindAtom(s);

Mp4meta.cpp (jni\mp4v2):113
    MP4Atom *pHdlrAtom = m_pRootAtom->FindAtom("moov.udta.meta.hdlr");
    MP4StringProperty *pStringProperty = NULL;
    MP4BytesProperty *pBytesProperty = NULL;
Mp4meta.cpp (jni\mp4v2):144
    sprintf(s, "moov.udta.meta.ilst.%s", name);
    pMetaAtom = m_pRootAtom->FindAtom(s);

Mp4meta.cpp (jni\mp4v2):148
      sprintf(s, "moov.udta.%s", name);
      pMetaAtom = m_pRootAtom->FindAtom(s);
    }
Mp4meta.cpp (jni\mp4v2):171
  sprintf(atomstring, "moov.udta.meta.ilst.%s.data", atom);

  pMetaAtom = m_pRootAtom->FindAtom(atomstring);
Mp4meta.cpp (jni\mp4v2):196
    sprintf(atomstring, "moov.udta.meta.ilst.%s.data.metadata", atom);

    *value = NULL;
Mp4meta.cpp (jni\mp4v2):211
	sprintf(atomstring, "moov.udta.%s.metadata", atom);
	GetBytesProperty(atomstring, (u_int8_t**)&val, &valSize);
      }
Mp4meta.cpp (jni\mp4v2):335
    const char *s = "moov.udta.meta.ilst.trkn.data";
    MP4BytesProperty *pMetadataProperty = NULL;
    MP4Atom *pMetaAtom = NULL;
Mp4meta.cpp (jni\mp4v2):367
    const char *s = "moov.udta.meta.ilst.trkn.data.metadata";

    *track = 0;
Mp4meta.cpp (jni\mp4v2):393
    const char *s = "moov.udta.meta.ilst.disk.data";
    MP4BytesProperty *pMetadataProperty = NULL;
    MP4Atom *pMetaAtom = NULL;
Mp4meta.cpp (jni\mp4v2):425
    const char *s = "moov.udta.meta.ilst.disk.data.metadata";

    *disk = 0;
Mp4meta.cpp (jni\mp4v2):513
    const char *s = "moov.udta.meta.ilst.gnre.data";
    const char *sroot = "moov.udta.meta.ilst.gnre";
    const char *s2 = "moov.udta.meta.ilst.\251gen.data";
    const char *s2root = "moov.udta.meta.ilst.\251gen";
    if (genreIndex != 0)
    {
Mp4meta.cpp (jni\mp4v2):583
    const char *t = "moov.udta.meta.ilst.gnre";
    const char *s = "moov.udta.meta.ilst.gnre.data.metadata";

    *value = NULL;
Mp4meta.cpp (jni\mp4v2):606
        const char *s2 = "moov.udta.meta.ilst.\251gen.data.metadata";

        val = NULL;
Mp4meta.cpp (jni\mp4v2):652
    const char *s = "moov.udta.meta.ilst.tmpo.data";
    MP4BytesProperty *pMetadataProperty = NULL;
    MP4Atom *pMetaAtom = NULL;
Mp4meta.cpp (jni\mp4v2):682
    const char *s = "moov.udta.meta.ilst.tmpo.data.metadata";

    *tempo = 0;
Mp4meta.cpp (jni\mp4v2):704
    const char *s = "moov.udta.meta.ilst.cpil.data";
    MP4BytesProperty *pMetadataProperty = NULL;
    MP4Atom *pMetaAtom = NULL;
Mp4meta.cpp (jni\mp4v2):731
    const char *s = "moov.udta.meta.ilst.cpil.data.metadata";

    *compilation = 0;
Mp4meta.cpp (jni\mp4v2):752
    const char *s = "moov.udta.meta.ilst.covr.data";
    MP4BytesProperty *pMetadataProperty = NULL;
    MP4Atom *pMetaAtom = NULL;
Mp4meta.cpp (jni\mp4v2):776
    const char *s = "moov.udta.meta.ilst.covr.data.metadata";

    *coverArt = NULL;
Mp4meta.cpp (jni\mp4v2):791
   MP4Atom *pMetaAtom = m_pRootAtom->FindAtom("moov.udta.meta.ilst.covr");
   if (!pMetaAtom)
     return 0;
Mp4meta.cpp (jni\mp4v2):814
        sprintf(s, "moov.udta.meta.ilst.----[%u].name", i);

        MP4Atom *pTagAtom = m_pRootAtom->FindAtom(s);
Mp4meta.cpp (jni\mp4v2):833
                    sprintf(s, "moov.udta.meta.ilst.----[%u].data.metadata", i);
                    SetBytesProperty(s, pValue, valueSize);

Mp4meta.cpp (jni\mp4v2):848
    sprintf(s, "moov.udta.meta.ilst.----[%u].data", i);
    AddDescendantAtoms("moov", t);

    pMetaAtom = m_pRootAtom->FindAtom(s);
Mp4meta.cpp (jni\mp4v2):858
    MP4Atom *pHdlrAtom = m_pRootAtom->FindAtom("moov.udta.meta.hdlr");
    MP4StringProperty *pStringProperty = NULL;
    MP4BytesProperty *pBytesProperty = NULL;
Mp4meta.cpp (jni\mp4v2):886
    sprintf(s, "moov.udta.meta.ilst.----[%u].name", i);
    pMetaAtom = m_pRootAtom->FindAtom(s);
    pMetaAtom->FindProperty("name.metadata", (MP4Property**)&pMetadataProperty);
Mp4meta.cpp (jni\mp4v2):892
    sprintf(s, "moov.udta.meta.ilst.----[%u].mean", i);
    pMetaAtom = m_pRootAtom->FindAtom(s);
    pMetaAtom->FindProperty("mean.metadata", (MP4Property**)&pMetadataProperty);
Mp4meta.cpp (jni\mp4v2):913
        sprintf(s, "moov.udta.meta.ilst.----[%u].name", i);

        MP4Atom *pTagAtom = m_pRootAtom->FindAtom(s);
Mp4meta.cpp (jni\mp4v2):932
                    sprintf(s, "moov.udta.meta.ilst.----[%u].data.metadata", i);
                    GetBytesProperty(s, ppValue, pValueSize);

Mp4meta.cpp (jni\mp4v2):953
        sprintf(s, "moov.udta.meta.ilst.----[%u].name", i);

        MP4Atom *pTagAtom = m_pRootAtom->FindAtom(s);
Mp4meta.cpp (jni\mp4v2):988
    sprintf(s, "moov.udta.meta");
    pMetaAtom = m_pRootAtom->FindAtom(s);

Mp4track.h (jni\mp4v2):183
	MP4Atom* 	m_pTrakAtom;		// moov.trak[]
	MP4TrackId	m_trackId;			// moov.trak[].tkhd.trackId
	MP4StringProperty* m_pTypeProperty;	// moov.trak[].mdia.hdlr.handlerType

	u_int32_t	m_lastStsdIndex;
Mp4util.cpp (jni\mp4v2):64
//moov.track[index].tkhd.width

bool MP4NameFirstMatches(const char* s1, const char* s2) 
